name: Deployment

on:
  push:
    tags:
      - '*.*.*'

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
      - uses: DeLaGuardo/setup-clj-kondo@master
        with:
          version: '2021.08.06'

      - uses: actions/checkout@v2

      - name: clj-kondo
        run: clj-kondo --lint src

      - name: Install lein deps
        run: lein deps

      - name: Lein Kibit
        run: lein kibit

  lein_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: lein deps

    - name: Run tests
      run: lein test

  build_jar:
    name: Build JAR

    needs:
      - lint
      - lein_test

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - all.jar

    steps:

      - uses: actions/checkout@v2

      - name: Lein
        run: lein uberjar

      - name: Move and rename JAR
        run: mv target/uberjar/graal-cli-template-*-standalone.jar graal-cli-template-${{ matrix.target }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload JAR
        uses: actions/upload-artifact@v2
        with:
          name: graal-cli-template-${{ matrix.target }}
          path: graal-cli-template-${{ matrix.target }}

  build_linux:
    name: Build Linux

    needs:
      - lint
      - lein_test

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v2

      - name: Make
        run: make

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Move and rename binary
        run: mv target/graal-cli-template graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Compress binary
        run: |
          tar cvzf graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz
          path: graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz

  build_macos:
    name: Build macOS

    needs:
      - build_jar

    runs-on: macos-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - apple-darwin-x86_64

    steps:
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: graal-cli-template-all.jar

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.1.0'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Build Native Image
        run: |
          native-image \
          --no-fallback \
          --report-unsupported-elements-at-runtime \
          -H:+ReportExceptionStackTraces \
          --allow-incomplete-classpath \
          -jar graal-cli-template-all.jar \
          -H:Name=graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Run file on binary
        run: file graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Run shasum -a 256 on the binary
        run: shasum -a 256 graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Compress binary
        run: |
          tar cvzf graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz
          path: graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz

  build_windows:
    name: Build Windows

    needs:
      - build_jar

    strategy:
      fail-fast: true
      matrix:
        target:
          - windows-x86_64

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: graal-cli-template-all.jar

      - name: Add developer command prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@v1

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.1.0'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print the current state of the directory
        shell: powershell
        run: dir

      - name: Build Native Image
        shell: cmd
        run: native-image --no-fallback --report-unsupported-elements-at-runtime -H:+ReportExceptionStackTraces --allow-incomplete-classpath -jar graal-cli-template-all.jar -H:Name=graal-cli-template-${{ matrix.target }}

      - name: Print the current state of the directory
        shell: powershell
        run: dir

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: graal-cli-template-${{ matrix.target }}.exe
          path: graal-cli-template-${{ matrix.target }}.exe

  integration_tests:
    name: Run integration tests

    needs:
      - lint
      - lein_test
      - build_linux
      - build_macos
      - build_windows

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            target: linux-x86_64
          - os: macos-latest
            target: apple-darwin-x86_64
          - os: windows-latest
            target: windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download bats
        if: "!contains(matrix.target, 'windows') && success()"
        run: |
          git submodule add https://github.com/bats-core/bats-core.git test/bats
          git submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support
          git submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert

      - name: Display the contents of the test dir
        if: "!contains(matrix.target, 'windows')"
        run: ls -Ral test/*

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Download build artifacts (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        uses: actions/download-artifact@v2
        with:
          name: graal-cli-template-${{ matrix.target }}

      - name: Download build artifacts (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        uses: actions/download-artifact@v2
        with:
          name: graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz

      - name: Extract archive (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: tar xvf graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }}.tar.gz

      - name: Rename binary (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: mv graal-cli-template-${{ steps.tag.outputs.tag }}-${{ matrix.target }} graal-cli-template

      - name: Rename binary (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        run: mv graal-cli-template-${{ matrix.target }} graal-cli-template.exe

      - name: Make binary executable (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: chmod +x graal-cli-template

      - name: List directory (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: ls -alh

      - name: Run file on binary (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        run: file graal-cli-template

      - name: Run shasum -a 256 on the binary (MACOS)
        if: "contains(matrix.target, 'apple')"
        run: shasum -a 256 graal-cli-template

      - name: List directory (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        run: dir

      - name: Run bats tests (NON-WINDOWS)
        if: "!contains(matrix.target, 'windows')"
        shell: bash
        run: ./test/bats/bin/bats -r ./test/xyz/thoren/

      - name: Run the executable with -h (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./graal-cli-template.exe -h

      - name: Run the executable with -v (WINDOWS)
        if: "contains(matrix.target, 'windows')"
        shell: bash
        run: ./graal-cli-template.exe -v

  create_release:
    name: Create Release

    needs:
      - lint
      - lein_test
      - build_jar
      - build_linux
      - build_macos
      - build_windows
      - integration_tests

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_tag: ${{ steps.tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{github.ref}}
          draft: false
          prerelease: false

  package_deb:
    name: Package DEB package

    needs:
      - create_release

    runs-on: ubuntu-latest

    outputs:
      package_name: ${{ steps.build_deb.outputs.package }}

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Extract archive
        run: |
          tar xvf graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Rename binary
        run: |
          mv graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }} graal-cli-template-${{ matrix.target }}

      - name: Build DEB Package
        id: build_deb
        uses: kentik/pkg@v1.0.0-rc7
        with:
          name: graal-cli-template
          version: ${{ needs.create_release.outputs.release_tag }}
          arch: x86_64
          format: deb
          package: package.yml

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build_deb.outputs.package }}
          path: ${{ steps.build_deb.outputs.package }}

  package_rpm:
    name: Package RPM package

    needs:
      - create_release

    runs-on: ubuntu-latest

    outputs:
      package_name: ${{ steps.build_rpm.outputs.package }}

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Extract archive
        run: |
          tar xvf graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Rename binary
        run: |
          mv graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }} graal-cli-template-${{ matrix.target }}

      - name: Build RPM Package
        id: build_rpm
        uses: kentik/pkg@v1.0.0-rc7
        with:
          name: graal-cli-template
          version: ${{ needs.create_release.outputs.release_tag }}
          arch: x86_64
          format: rpm
          package: package.yml

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build_rpm.outputs.package }}
          path: ${{ steps.build_rpm.outputs.package }}

  sign_release_assets:
    name: Sign Release Assets

    needs:
      - create_release
      - package_deb
      - package_rpm

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -Ralh

      - name: Make tmp directory
        run: mkdir -p tmp

      - name: Move all artifacts to tmp directory
        run: find ./graal-cli-template* -mindepth 1 -name 'graal-cli-template*' -type f -exec mv {} tmp/ \;

      - name: Remove empty directories
        run: rmdir graal-cli-template*

      - name: Move all artifacts to the current directory
        run: mv tmp/* .

      - name: Remove empty tmp directory
        run: rmdir tmp

      - name: Display current directory
        run: ls -alh

      - name: Sign artifacts
        uses: tristan-weil/ghaction-checksum-sign-artifact@v1.0.1
        with:
          checksum_output: 'one_file_per_digest'
          sign_output: 'checksum_detach'
          path: 'graal-cli-template*'
          sign_key: '${{ secrets.SIGN_KEY }}'
          sign_key_passphrase: '${{ secrets.SIGN_KEY_PASSPHRASE }}'
          sign_key_fingerprint: '${{ secrets.SIGN_KEY_FINGERPRINT }}'

      - name: Print the current state of the directory
        run: ls -Ralh

      - name: Upload checksum artifact
        uses: actions/upload-artifact@v2
        with:
          name: SHA256SUMS
          path: SHA256SUMS

      - name: Upload signature artifact
        uses: actions/upload-artifact@v2
        with:
          name: SHA256SUMS.asc
          path: SHA256SUMS.asc

  upload_release_assets:
    name: Upload Release Assets

    needs:
      - create_release
      - package_deb
      - package_rpm
      - sign_release_assets

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - all.jar
          - linux-x86_64
          - apple-darwin-x86_64
          - windows-x86_64

    steps:
      - uses: actions/checkout@v2

      - name: Download checksum artifact
        if: contains(matrix.target, 'linux')
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS

      - name: Download signature artifact
        if: contains(matrix.target, 'linux')
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS.asc

      - name: Download artifact (DEB)
        if: contains(matrix.target, 'linux')
        uses: actions/download-artifact@v2.0.5
        with:
          name: ${{ needs.package_deb.outputs.package_name }}

      - name: Download artifact (RPM)
        if: contains(matrix.target, 'linux')
        uses: actions/download-artifact@v2.0.5
        with:
          name: ${{ needs.package_rpm.outputs.package_name }}

      - name: Download artifact (JAR)
        if: contains(matrix.target, 'all')
        uses: actions/download-artifact@v2.0.5
        with:
          name: graal-cli-template-${{ matrix.target }}

      - name: Download artifact (UNIX)
        if: "!contains(matrix.target, 'all') && !contains(matrix.target, 'windows')"
        uses: actions/download-artifact@v2.0.5
        with:
          name: graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz

      - name: Download artifact (WINDOWS)
        if: contains(matrix.target, 'windows')
        uses: actions/download-artifact@v2.0.5
        with:
          name: graal-cli-template-${{ matrix.target }}.exe

      - name: Print the current state of the directory
        run: ls -Ralh

      - name: Release DEB
        if: contains(matrix.target, 'linux')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ needs.package_deb.outputs.package_name }}
          asset_name: ${{ needs.package_deb.outputs.package_name }}
          asset_content_type: application/x-deb

      - name: Release RPM
        if: contains(matrix.target, 'linux')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ needs.package_rpm.outputs.package_name }}
          asset_name: ${{ needs.package_rpm.outputs.package_name }}
          asset_content_type: application/x-rpm

      - name: Release executable (JAR)
        if: contains(matrix.target, 'all')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./graal-cli-template-${{ matrix.target }}
          asset_name: graal-cli-template-${{ matrix.target }}
          asset_content_type: application/java-archive

      - name: Release executable (UNIX)
        if: "!contains(matrix.target, 'all') && !contains(matrix.target, 'windows')"
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz
          asset_name: graal-cli-template-${{ needs.create_release.outputs.release_tag }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

      - name: Release executable (WINDOWS)
        if: contains(matrix.target, 'windows')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./graal-cli-template-${{ matrix.target }}.exe
          asset_name: graal-cli-template-${{ matrix.target }}.exe
          asset_content_type: application/octet-stream

      - name: Release checksum (LINUX)
        if: contains(matrix.target, 'linux')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain

      - name: Release signature (LINUX)
        if: contains(matrix.target, 'linux')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS.asc
          asset_name: SHA256SUMS.asc
          asset_content_type: text/plain

